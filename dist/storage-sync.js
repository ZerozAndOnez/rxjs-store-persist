"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge = require("deepmerge");
const helpers_1 = require("./helpers");
const options_1 = require("./options");
const INIT_ACTION = '@ngrx/store/init';
const UPDATE_ACTION = '@ngrx/store/update-reducers';
exports.storageSync = () => (reducer) => {
    const stateKeys = helpers_1.validateStateKeys(options_1.config.keys);
    const rehydratedState = exports.rehydrateApplicationState(stateKeys, options_1.config.storage);
    return function (state, action) {
        let nextState;
        if ((action.type === INIT_ACTION) && !state) {
            nextState = reducer(state, action);
        }
        else {
            nextState = Object.assign({}, state);
        }
        if (action.type === INIT_ACTION || action.type === UPDATE_ACTION) {
            // @ts-ignore
            const overwriteMerge = (destinationArray, sourceArray) => sourceArray;
            const options = {
                arrayMerge: overwriteMerge
            };
            nextState = deepmerge(nextState, rehydratedState, options);
        }
        nextState = reducer(nextState, action);
        if (action.type !== INIT_ACTION) {
            exports.syncStateUpdate(nextState, stateKeys, options_1.config.storage);
        }
        return nextState;
    };
};
exports.rehydrateApplicationState = (keys, storage) => {
    return keys.reduce((acc, curr) => {
        let key = curr;
        if (storage !== undefined) {
            let stateSlice = storage.getItem(key);
            if (stateSlice) {
                const isObjectRegex = new RegExp('{|\\[');
                let raw = stateSlice;
                if (stateSlice === 'null' || isObjectRegex.test(stateSlice.charAt(0))) {
                    raw = JSON.parse(stateSlice);
                }
                return Object.assign({}, acc, {
                    [key]: raw
                });
            }
        }
        return acc;
    }, {});
};
exports.syncStateUpdate = (state, keys, storage) => {
    keys.forEach(key => {
        let stateSlice = state[key];
        let replacer = undefined;
        let space = undefined;
        if (typeof stateSlice !== 'undefined' && storage !== undefined) {
            try {
                storage.setItem(key, typeof stateSlice === 'string'
                    ? stateSlice
                    : JSON.stringify(stateSlice, replacer, space));
            }
            catch (e) {
                console.warn('Unable to save state to localStorage:', e);
            }
        }
        else if (typeof stateSlice === 'undefined') {
            try {
                storage.removeItem(key);
            }
            catch (e) {
                console.warn(`Exception on removing/cleaning undefined '${key}' state`, e);
            }
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1zeW5jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0b3JhZ2Utc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUF1QztBQUN2Qyx1Q0FBNEM7QUFDNUMsdUNBQWlDO0FBRWpDLE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDO0FBQ3ZDLE1BQU0sYUFBYSxHQUFHLDZCQUE2QixDQUFDO0FBRXZDLFFBQUEsV0FBVyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQy9CLE9BQVksRUFDWixFQUFFO0lBQ0YsTUFBTSxTQUFTLEdBQUcsMkJBQWlCLENBQUMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxNQUFNLGVBQWUsR0FBRyxpQ0FBeUIsQ0FBQyxTQUFTLEVBQUUsZ0JBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU3RSxPQUFPLFVBQVUsS0FBVSxFQUFFLE1BQVc7UUFDdEMsSUFBSSxTQUFTLENBQUM7UUFFZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUMzQyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNwQzthQUFNO1lBQ0wsU0FBUyxxQkFBUSxLQUFLLENBQUUsQ0FBQztTQUMxQjtRQUNELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxhQUFhLEVBQUU7WUFDaEUsYUFBYTtZQUNiLE1BQU0sY0FBYyxHQUFHLENBQUMsZ0JBQXFCLEVBQUUsV0FBZ0IsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDO1lBQ2hGLE1BQU0sT0FBTyxHQUFzQjtnQkFDakMsVUFBVSxFQUFFLGNBQWM7YUFDM0IsQ0FBQztZQUNGLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1RDtRQUVELFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDL0IsdUJBQWUsQ0FDYixTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFNLENBQUMsT0FBTyxDQUNmLENBQUM7U0FDSDtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVXLFFBQUEseUJBQXlCLEdBQUcsQ0FDdkMsSUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDL0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBRWYsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3pCLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsTUFBTSxhQUFhLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzFDLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQztnQkFFckIsSUFBSSxVQUFVLEtBQUssTUFBTSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNyRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDOUI7Z0JBRUQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7b0JBQzVCLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRztpQkFDWCxDQUFDLENBQUM7YUFDSjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDVCxDQUFDLENBQUM7QUFFVyxRQUFBLGVBQWUsR0FBRyxDQUM3QixLQUFVLEVBQ1YsSUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBRXRCLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDOUQsSUFBSTtnQkFDRixPQUFPLENBQUMsT0FBTyxDQUNiLEdBQUcsRUFDSCxPQUFPLFVBQVUsS0FBSyxRQUFRO29CQUM1QixDQUFDLENBQUMsVUFBVTtvQkFDWixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUNoRCxDQUFDO2FBQ0g7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzFEO1NBQ0Y7YUFBTSxJQUFJLE9BQU8sVUFBVSxLQUFLLFdBQVcsRUFBRTtZQUM1QyxJQUFJO2dCQUNGLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDekI7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixPQUFPLENBQUMsSUFBSSxDQUNWLDZDQUE2QyxHQUFHLFNBQVMsRUFDekQsQ0FBQyxDQUNGLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkZWVwbWVyZ2UgZnJvbSBcImRlZXBtZXJnZVwiO1xyXG5pbXBvcnQge3ZhbGlkYXRlU3RhdGVLZXlzfSBmcm9tIFwiLi9oZWxwZXJzXCI7XHJcbmltcG9ydCB7Y29uZmlnfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcblxyXG5jb25zdCBJTklUX0FDVElPTiA9ICdAbmdyeC9zdG9yZS9pbml0JztcclxuY29uc3QgVVBEQVRFX0FDVElPTiA9ICdAbmdyeC9zdG9yZS91cGRhdGUtcmVkdWNlcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0b3JhZ2VTeW5jID0gKCkgPT4gKFxyXG4gIHJlZHVjZXI6IGFueVxyXG4pID0+IHtcclxuICBjb25zdCBzdGF0ZUtleXMgPSB2YWxpZGF0ZVN0YXRlS2V5cyhjb25maWcua2V5cyk7XHJcbiAgY29uc3QgcmVoeWRyYXRlZFN0YXRlID0gcmVoeWRyYXRlQXBwbGljYXRpb25TdGF0ZShzdGF0ZUtleXMsIGNvbmZpZy5zdG9yYWdlKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZTogYW55LCBhY3Rpb246IGFueSkge1xyXG4gICAgbGV0IG5leHRTdGF0ZTtcclxuXHJcbiAgICBpZiAoKGFjdGlvbi50eXBlID09PSBJTklUX0FDVElPTikgJiYgIXN0YXRlKSB7XHJcbiAgICAgIG5leHRTdGF0ZSA9IHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXh0U3RhdGUgPSB7IC4uLnN0YXRlIH07XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09IElOSVRfQUNUSU9OIHx8IGFjdGlvbi50eXBlID09PSBVUERBVEVfQUNUSU9OKSB7XHJcbiAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgY29uc3Qgb3ZlcndyaXRlTWVyZ2UgPSAoZGVzdGluYXRpb25BcnJheTogYW55LCBzb3VyY2VBcnJheTogYW55KSA9PiBzb3VyY2VBcnJheTtcclxuICAgICAgY29uc3Qgb3B0aW9uczogZGVlcG1lcmdlLk9wdGlvbnMgPSB7XHJcbiAgICAgICAgYXJyYXlNZXJnZTogb3ZlcndyaXRlTWVyZ2VcclxuICAgICAgfTtcclxuICAgICAgbmV4dFN0YXRlID0gZGVlcG1lcmdlKG5leHRTdGF0ZSwgcmVoeWRyYXRlZFN0YXRlLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBuZXh0U3RhdGUgPSByZWR1Y2VyKG5leHRTdGF0ZSwgYWN0aW9uKTtcclxuXHJcbiAgICBpZiAoYWN0aW9uLnR5cGUgIT09IElOSVRfQUNUSU9OKSB7XHJcbiAgICAgIHN5bmNTdGF0ZVVwZGF0ZShcclxuICAgICAgICBuZXh0U3RhdGUsXHJcbiAgICAgICAgc3RhdGVLZXlzLFxyXG4gICAgICAgIGNvbmZpZy5zdG9yYWdlXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlaHlkcmF0ZUFwcGxpY2F0aW9uU3RhdGUgPSAoXHJcbiAga2V5czogYW55W10sXHJcbiAgc3RvcmFnZTogU3RvcmFnZVxyXG4pID0+IHtcclxuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xyXG4gICAgbGV0IGtleSA9IGN1cnI7XHJcblxyXG4gICAgaWYgKHN0b3JhZ2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBsZXQgc3RhdGVTbGljZSA9IHN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICBpZiAoc3RhdGVTbGljZSkge1xyXG4gICAgICAgIGNvbnN0IGlzT2JqZWN0UmVnZXggPSBuZXcgUmVnRXhwKCd7fFxcXFxbJyk7XHJcbiAgICAgICAgbGV0IHJhdyA9IHN0YXRlU2xpY2U7XHJcblxyXG4gICAgICAgIGlmIChzdGF0ZVNsaWNlID09PSAnbnVsbCcgfHwgaXNPYmplY3RSZWdleC50ZXN0KHN0YXRlU2xpY2UuY2hhckF0KDApKSkge1xyXG4gICAgICAgICAgcmF3ID0gSlNPTi5wYXJzZShzdGF0ZVNsaWNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBhY2MsIHtcclxuICAgICAgICAgIFtrZXldOiByYXdcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjYztcclxuICB9LCB7fSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qgc3luY1N0YXRlVXBkYXRlID0gKFxyXG4gIHN0YXRlOiBhbnksXHJcbiAga2V5czogYW55W10sXHJcbiAgc3RvcmFnZTogU3RvcmFnZVxyXG4pID0+IHtcclxuICBrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGxldCBzdGF0ZVNsaWNlID0gc3RhdGVba2V5XTtcclxuICAgIGxldCByZXBsYWNlciA9IHVuZGVmaW5lZDtcclxuICAgIGxldCBzcGFjZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAodHlwZW9mIHN0YXRlU2xpY2UgIT09ICd1bmRlZmluZWQnICYmIHN0b3JhZ2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHN0b3JhZ2Uuc2V0SXRlbShcclxuICAgICAgICAgIGtleSxcclxuICAgICAgICAgIHR5cGVvZiBzdGF0ZVNsaWNlID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICA/IHN0YXRlU2xpY2VcclxuICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShzdGF0ZVNsaWNlLCByZXBsYWNlciwgc3BhY2UpXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIHNhdmUgc3RhdGUgdG8gbG9jYWxTdG9yYWdlOicsIGUpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdGF0ZVNsaWNlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgYEV4Y2VwdGlvbiBvbiByZW1vdmluZy9jbGVhbmluZyB1bmRlZmluZWQgJyR7a2V5fScgc3RhdGVgLFxyXG4gICAgICAgICAgZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufTtcclxuIl19